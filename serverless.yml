service: threatstack-aws-sns-publisher

plugins:
  - serverless-python-requirements
  - serverless-cloudformation-parameter-setter
  - serverless-sam

custom:
  stage: "${opt:stage, env:SLS_STAGE, 'dev'}"
  profile: "${opt:aws-profile, env:AWS_PROFILE, env:AWS_DEFAULT_PROFILE, 'default'}"
  log_level: "${env:LOG_LEVEL, 'INFO'}"
  endpoint_path: "${self:service}/api/v2/alert"

  # Threat Stack setup
  cf-parameters:
    ThreatStackApiKey: "${env:THREATSTACK_API_KEY, ''}"
    ThreatStackOrgId: "${env:THREATSTACK_ORG_ID, ''}"
    ThreatStackUserId: "${env:THREATSTACK_USER_ID, ''}"

  # Ensure consistent build environment; also avoid issue deploying from Mac
  # with Homebrew Python.
  pythonRequirements:
    dockerizePip: true

provider:
  name: aws
  profile: ${self:custom.profile}
  stage: ${self:custom.stage}
  runtime: python3.6
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "SNS:GetTopicAttributes"
        - "SNS:Publish"
      Resource:
        Ref: SnsTopic

functions:
  ThreatStackAwsSnsPublisher:
    description: "Receive Threat Stack webhooks, lookup alert detail data, and publish to SNS."
    handler: handlers/threatstack-aws-sns-publisher.handler
    memorySize: 128
    timeout: 15
    environment:
      AWS_SNS_TOPIC_ARN:
        Ref: SnsTopic
      THREATSTACK_API_KEY:
        Ref: ThreatStackApiKey
      THREATSTACK_ORG_ID:
        Ref: ThreatStackOrgId
      THREATSTACK_USER_ID:
        Ref: ThreatStackUserId
      LOG_LEVEL: "${self:custom.log_level}"
    events:
      - http:
          method: POST
          path: "${self:service}/api/v2/alert"


resources:
  Parameters:
    ThreatStackApiKey:
      Type: String
      Description: "Threat Stack API key"
      NoEcho: true
    ThreatStackOrgId:
      Type: String
      Description: "Threat Stack org ID"
      NoEcho: true
    ThreatStackUserId:
      Type: String
      Description: "Threat Stack user ID"
      NoEcho: true

  Resources:
    SnsTopic:
      Type: "AWS::SNS::Topic"

    SnsTopicPolicy:
      Type: "AWS::SNS::TopicPolicy"
      Properties:
        PolicyDocument: {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "SNS:GetTopicAttributes",
                "SNS:SetTopicAttributes",
                "SNS:AddPermission",
                "SNS:RemovePermission",
                "SNS:DeleteTopic",
                "SNS:Subscribe",
                "SNS:ListSubscriptionsByTopic",
                "SNS:Publish",
                "SNS:Receive"
              ],
              "Resource": {
                "Fn::Join": [
                  ":",
                  [
                    "arn:aws:sns",
                    Ref: "AWS::Region",
                    Ref: "AWS::AccountId",
                    Fn::GetAtt: ["SnsTopic", "TopicName"]
                  ]
                ]
              },
              "Condition": {
                "StringEquals": {
                  "AWS:SourceOwner": {
                    "Ref": "AWS::AccountId"
                  }
                }
              }
            }
          ]
        }
        Topics:
          - Ref: SnsTopic

    SnsConfirmSubscriptionIamManagedPolicy:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
        Description: "Confirm SNS topic subscription"
        PolicyDocument: {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sns:ConfirmSubscription"
              ],
              "Resource": [
                {
                  "Ref": "SnsTopic"
                }
              ]
            }
          ]
        }

  Outputs:
    SnsTopicArn:
      Description: "SNS Topic ARN; used by deployed subscribers"
      Value:
        Ref: "SnsTopic"
      Export:
        Name:
          Fn::Join:
            - "-"
            - - Ref: "AWS::StackName"
              - "SnsTopicArn"

    SnsConfirmSubscriptionIamManagedPolicyArn:
      Description: "ARN of IAM managed policy for subscription confirmation"
      Value:
        Ref: "SnsConfirmSubscriptionIamManagedPolicy"
      Export:
        Name:
          Fn::Join:
            - "-"
            - - Ref: "AWS::StackName"
              - "SnsConfirmSubscriptionIamManagedPolicyArn"

    WebHookEndpoint:
      Description: "Webhook endpoint"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.us-east-1.amazonaws.com/${self:provider.stage}"
            - "/${self:custom.endpoint_path}"
      Export:
        Name:
          Fn::Join:
            - "-"
            - - Ref: "AWS::StackName"
              - "WebHookEndpoint"

